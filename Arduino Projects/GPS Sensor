Arduino Program

#include <TinyGPS++.h>
#include <SoftwareSerial.h>
//yellow =3 and green=2
TinyGPSPlus gps;
SoftwareSerial ss(3, 2);
void setup()
{
 Serial.begin(9600);
 ss.begin(9600);
 Serial.println(F("Sats HDOP Latitude Longitude Fix Date Time Date Alt Course Speed Card Distance Course Card
Chars Sentences Checksum"));
 Serial.println(F(" (deg) (deg) Age Age (m) --- from GPS ---- ---- to London ---- RX RX Fail"));
 Serial.println(F("====================================================================================="));
}
void loop()
{
 static const double LONDON_LAT = 51.508131, LONDON_LON = -0.128002;
 printInt(gps.satellites.value(), gps.satellites.isValid(), 5);
 printFloat(gps.hdop.hdop(), gps.hdop.isValid(), 6, 1);
 printFloat(gps.location.lat(), gps.location.isValid(), 11, 6);
 printFloat(gps.location.lng(), gps.location.isValid(), 12, 6);
 printInt(gps.location.age(), gps.location.isValid(), 5);
 printDateTime(gps.date, gps.time);
 printFloat(gps.altitude.meters(), gps.altitude.isValid(), 7, 2);
 printFloat(gps.course.deg(), gps.course.isValid(), 7, 2);
 printFloat(gps.speed.kmph(), gps.speed.isValid(), 6, 2);
 printStr(gps.course.isValid() ? TinyGPSPlus::cardinal(gps.course.deg()) : "*** ", 6);
 unsigned long distanceKmToLondon =(unsigned
long)TinyGPSPlus::distanceBetween(gps.location.lat(),gps.location.lng(),LONDON_LAT, LONDON_LON) / 1000;
 printInt(distanceKmToLondon, gps.location.isValid(), 9);
 double courseToLondon =TinyGPSPlus::courseTo(gps.location.lat(),gps.location.lng(),LONDON_LAT, LONDON_LON);
 printFloat(courseToLondon, gps.location.isValid(), 7, 2);
 const char *cardinalToLondon = TinyGPSPlus::cardinal(courseToLondon);
 printStr(gps.location.isValid() ? cardinalToLondon : "*** ", 6);
 printInt(gps.charsProcessed(), true, 6);
 printInt(gps.sentencesWithFix(), true, 10);
 printInt(gps.failedChecksum(), true, 9);
 Serial.println();
 smartDelay(1000);
 if (millis() > 5000 && gps.charsProcessed() < 10)
 Serial.println(F("No GPS data received: check wiring"));
}
// This custom version of delay() ensures that the gps object
// is being "fed".
static void smartDelay(unsigned long ms)
{ unsigned long start = millis();
 do
 {
 while (ss.available())
 gps.encode(ss.read());
 } while (millis() - start < ms);
}
static void printFloat(float val, bool valid, int len, int prec)
{ if (!valid) {
 while (len-- > 1)
 Serial.print('*');
 Serial.print(' ');
 }
 else
 {
 Serial.print(val, prec);
 int vi = abs((int)val);
 int flen = prec + (val < 0.0 ? 2 : 1); // . and -
 flen += vi >= 1000 ? 4 : vi >= 100 ? 3 : vi >= 10 ? 2 : 1;
 for (int i=flen; i<len; ++i)
 Serial.print(' ');
 }
 smartDelay(0);
}
static void printInt(unsigned long val, bool valid, int len)
{
 char sz[32] = "*****************";
 if (valid)
 sprintf(sz, "%ld", val);
 sz[len] = 0;
 for (int i=strlen(sz); i<len; ++i)
 sz[i] = ' ';
 if (len > 0)
 sz[len-1] = ' ';
 Serial.print(sz);
 smartDelay(0);
}

static void printDateTime(TinyGPSDate &d, TinyGPSTime &t)
{
 if (!d.isValid())
 {
 Serial.print(F("********** "));
 }
 else
 {
 char sz[32];
 sprintf(sz, "%02d/%02d/%02d ", d.month(), d.day(), d.year());
 Serial.print(sz);
 }
 if (!t.isValid())
 {
 Serial.print(F("******** "));
 }
 else
 {
 char sz[32];
 sprintf(sz, "%02d:%02d:%02d ", t.hour(), t.minute(), t.second());
 Serial.print(sz);
 }
 printInt(d.age(), d.isValid(), 5);
 smartDelay(0);
}
static void printStr(const char *str, int len)
{
 int slen = strlen(str);
 for (int i=0; i<len; ++i)
 Serial.print(i<slen ? str[i] : ' ');
 smartDelay(0);
}

------------------------------------------------------------------------------------------------------------


When you connect a GPS board up, and look at the data coming off of it, you are likely to see something like this:
$GPRMC,000009.800,V,,,,,0.00,0.00,060180,,,N*43
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,000010.800,,,,,0,0,,,M,,M,,*41
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPRMC,000010.800,V,,,,,0.00,0.00,060180,,,N*4B
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,000011.800,,,,,0,0,,,M,,M,,*40
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPRMC,000011.800,V,,,,,0.00,0.00,060180,,,N*4A
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,000012.800,,,,,0,0,,,M,,M,,*43
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPGSV,1,1,00*79
There are different types of NMEA sentences. The type of message is indicated by the characters before the first comma.
The GP after the $ indicates it is a GPS position. The $GPGGA is the basic GPS NMEA message, that provides 3D
location and accuracy data. In the following sentence:
$GPGGA,110617.00,41XX.XXXXX,N,00831.54761,W,1,05,2.68,129.0,M,50.1,M,,*42
▪ 110617 – represents the time at which the fix location was taken, 11:06:17 UTC
▪ 41XX.XXXXX,N – latitude 41 deg XX.XXXXX’ N
▪ 00831.54761,W – Longitude 008 deg 31.54761′ W
▪ 1 – fix quality (0 = invalid; 1= GPS fix; 2 = DGPS fix; 3 = PPS fix; 4 = Real Time Kinematic; 5 = Float RTK; 6 =
estimated (dead reckoning); 7 = Manual input mode; 8 = Simulation mode)
▪ 05 – number of satellites being tracked
▪ 2.68 – Horizontal dilution of position
▪ 129.0, M – Altitude, in meters above the sea level
▪ 50.1, M – Height of geoid (mean sea level) above WGS84 ellipsoid
▪ empty field – time in seconds since last DGPS update
▪ empty field – DGPS station ID number
▪ *42 – the checksum data, always begins with *
The other NMEA sentences provide additional information:
▪ $GPGSA – GPS DOP and active satellites
▪ $GPGSV – Detailed GPS satellite information
▪ $GPGLL – Geographic Latitude and Longitude
▪ $GPRMC – Essential GPS pvt (position, velocity, time) data
▪ $GPVTG – Velocity made good
To know what each data field means in each of these sentences, you can
consult http://www.gpsinformation.org/dale/nmea.html

-------------------------------------------------------------------------------------------------------------

Functions Used from TINYGPS++ Library:

Serial.println(gps.location.lat(), 6); // Latitude in degrees (double)
Serial.println(gps.location.lng(), 6); // Longitude in degrees (double)
Serial.print(gps.location.rawLat().negative ? "-" : "+");
Serial.println(gps.location.rawLat().deg); // Raw latitude in whole degrees
Serial.println(gps.location.rawLat().billionths);// ... and billionths (u16/u32)
Serial.print(gps.location.rawLng().negative ? "-" : "+");
Serial.println(gps.location.rawLng().deg); // Raw longitude in whole degrees
Serial.println(gps.location.rawLng().billionths);// ... and billionths (u16/u32)
Serial.println(gps.date.value()); // Raw date in DDMMYY format (u32)
Serial.println(gps.date.year()); // Year (2000+) (u16)
Serial.println(gps.date.month()); // Month (1-12) (u8)
Serial.println(gps.date.day()); // Day (1-31) (u8)
Serial.println(gps.time.value()); // Raw time in HHMMSSCC format (u32)
Serial.println(gps.time.hour()); // Hour (0-23) (u8)
Serial.println(gps.time.minute()); // Minute (0-59) (u8)
Serial.println(gps.time.second()); // Second (0-59) (u8)
Serial.println(gps.time.centisecond()); // 100ths of a second (0-99) (u8)
Serial.println(gps.speed.value()); // Raw speed in 100ths of a knot (i32)
Serial.println(gps.speed.knots()); // Speed in knots (double)
Serial.println(gps.speed.mph()); // Speed in miles per hour (double)
Serial.println(gps.speed.mps()); // Speed in meters per second (double)
Serial.println(gps.speed.kmph()); // Speed in kilometers per hour (double)
Serial.println(gps.course.value()); // Raw course in 100ths of a degree (i32)
Serial.println(gps.course.deg()); // Course in degrees (double)
Serial.println(gps.altitude.value()); // Raw altitude in centimeters (i32)
Serial.println(gps.altitude.meters()); // Altitude in meters (double)
Serial.println(gps.altitude.miles()); // Altitude in miles (double)
Serial.println(gps.altitude.kilometers()); // Altitude in kilometers (double)
Serial.println(gps.altitude.feet()); // Altitude in feet (double)
Serial.println(gps.satellites.value()); // Number of satellites in use (u32)
Serial.println(gps.hdop.value()); // Horizontal Dim. of Precision (100ths-i32)

-------------------------------------------------------------------------------------------------------------
